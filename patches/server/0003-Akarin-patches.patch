From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JustMangoT <minetuan2@gmail.com>
Date: Thu, 9 Dec 2021 23:44:11 +0700
Subject: [PATCH] Akarin patches


diff --git a/src/main/java/net/minecraft/server/commands/GiveCommand.java b/src/main/java/net/minecraft/server/commands/GiveCommand.java
index a0dc380e90415de9068ea408d62a1605c82631df..714626c45b06979698b82ab80ce4302e3a8af9fd 100644
--- a/src/main/java/net/minecraft/server/commands/GiveCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GiveCommand.java
@@ -45,6 +45,7 @@ public class GiveCommand {
                     k -= l;
                     ItemStack itemStack = item.createItemStack(l, false);
                     boolean bl = serverPlayer.getInventory().add(itemStack);
+                    if (true) continue; // Akarin - Give command optimized
                     if (bl && itemStack.isEmpty()) {
                         itemStack.setCount(1);
                         ItemEntity itemEntity2 = serverPlayer.drop(itemStack, false, false, true); // Paper - Fix duplicating /give items on item drop cancel
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 8982562721c3a5a5a3305e90bd8b5bc21585a425..37e03a4ac7b3796c3507525a909341a004a850b9 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -23,6 +23,7 @@ import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
+import net.minecraft.server.MCUtil; // Akarin
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -148,37 +149,45 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public void save() throws IOException {
-        this.removeExpired(); // Paper - remove expired values before saving
-        JsonArray jsonarray = new JsonArray();
-        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
-            JsonObject jsonobject = new JsonObject();
+        // Akarin start - Save Stored User List asynchronously
+        Runnable runnable = () -> {
+            this.removeExpired(); // Paper - remove expired values before saving
+            JsonArray jsonarray = new JsonArray();
+            Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+                JsonObject jsonobject = new JsonObject();
+
+                Objects.requireNonNull(jsonlistentry);
+                return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+            });
+
+            Objects.requireNonNull(jsonarray);
+            stream.forEach(jsonarray::add);
+            try {
+                BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
-            Objects.requireNonNull(jsonlistentry);
-            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
-        });
+                try {
+                    StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+                } catch (Throwable throwable) {
+                    if (bufferedwriter != null) {
+                        try {
+                            bufferedwriter.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
+                        }
+                    }
 
-        Objects.requireNonNull(jsonarray);
-        stream.forEach(jsonarray::add);
-        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+                    throw throwable;
+                }
 
-        try {
-            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
-        } catch (Throwable throwable) {
-            if (bufferedwriter != null) {
-                try {
+                if (bufferedwriter != null) {
                     bufferedwriter.close();
-                } catch (Throwable throwable1) {
-                    throwable.addSuppressed(throwable1);
                 }
+            } catch (IOException e) {
+                StoredUserList.LOGGER.warn("Failed to save " + this.file, e);
             }
-
-            throw throwable;
-        }
-
-        if (bufferedwriter != null) {
-            bufferedwriter.close();
-        }
-
+        };
+        MCUtil.scheduleAsyncTask(runnable);
+        // Akarin - Save json list async
     }
 
     public void load() throws IOException {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3d973c5a62a2985a472c89c0a64aa7edc395aba2..009e05d874c5a6ecfbc829d3f9ccb75fa84a4ae9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1850,8 +1850,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     public void playerTouch(Player player) {}
 
     public void push(Entity entity) {
+        if (entity.noPhysics && this.noPhysics) return; // Akarin - Test this earlier
+
         if (!this.isPassengerOfSameVehicle(entity)) {
-            if (!entity.noPhysics && !this.noPhysics) {
+            if (true || !entity.noPhysics && !this.noPhysics) { // Akarin - Moved up
                 if (this.level.paperConfig.onlyPlayersCollide && !(entity instanceof ServerPlayer || this instanceof ServerPlayer)) return; // Paper
                 double d0 = entity.getX() - this.getX();
                 double d1 = entity.getZ() - this.getZ();
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index 114ea3c898a23575bb2b06bf5c754330c38495e7..57e18e4096857054f0e7988e25c57df369ae7783 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -8,6 +8,7 @@ import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.network.ServerPlayerConnection; // Akarin
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
@@ -109,12 +110,22 @@ public class PrimedTnt extends Entity {
                 net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket velocityPacket = new net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket(this);
                 net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket positionPacket = new net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket(this);
 
+                // Akarin start - remove stream
+                /*
                 ete.seenBy.stream()
                     .filter(viewer -> (viewer.getPlayer().getX() - this.getX()) * (viewer.getPlayer().getY() - this.getY()) * (viewer.getPlayer().getZ() - this.getZ()) < 16 * 16)
                     .forEach(viewer -> {
                         viewer.send(velocityPacket);
                         viewer.send(positionPacket);
                     });
+                */
+                for (ServerPlayerConnection viewer : ete.seenBy) {
+                    if ((viewer.getPlayer().getX() - this.getX()) * (viewer.getPlayer().getY() - this.getY()) * (viewer.getPlayer().getZ() - this.getZ()) < 16 * 16) {
+                        viewer.send(velocityPacket);
+                        viewer.send(positionPacket);
+                    }
+                }
+                // Akarin end
             }
         }
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index da00f75ccc9f8c2e2174d4450479202a50844245..9168e4981692e20def127deec9cbf21767588507 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -69,6 +69,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     }
 
     public void unpackLootTable(@Nullable Player player) {
+        if (player == null) return; // Akarin - Don't trigger Lootable Refresh for non player interaction
         if (this.lootableData.shouldReplenish(player) && this.level.getServer() != null) { // Paper
             LootTable lootTable = this.level.getServer().getLootTables().get(this.lootTable);
             if (player instanceof ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 35c39aed9583275ef25d32c783715798b52bdb63..331ed6aa983714d6fc3596526fc7df0ab993062c 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -56,7 +56,8 @@ public class PlayerDataStorage {
             File file = new File(this.playerDir, player.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
-            if ( org.bukkit.Bukkit.getOnlineMode() && !file.exists() ) // Paper - Check online mode first
+            boolean normalFile = file.exists() && file.isFile(); // Akarin - ensures normal file
+            if ( org.bukkit.Bukkit.getOnlineMode() && !normalFile ) // Paper - Check online mode first // Akarin - ensures normal file
             {
                 file = new File( this.playerDir, java.util.UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + player.getScoreboardName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
                 if ( file.exists() )
@@ -67,7 +68,7 @@ public class PlayerDataStorage {
             }
             // Spigot End
 
-            if (file.exists() && file.isFile()) {
+            if (normalFile) { // Akarin - avoid double I/O operation
                 nbttagcompound = NbtIo.readCompressed(file);
             }
             // Spigot Start
