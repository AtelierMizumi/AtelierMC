From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JustMangoT <minetuan2@gmail.com>
Date: Sat, 11 Dec 2021 10:00:41 +0700
Subject: [PATCH] Remove Pufferfish features


diff --git a/build.gradle.kts b/build.gradle.kts
index d239699705cbb298c590c2c49b5e6a34feb05def..12b6e0acf819b00bfdaa910c733525bfacfb9fe4 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -61,7 +61,7 @@ dependencies {
         exclude(group="org.yaml", module="snakeyaml")
     }
     // Pufferfish end
-    implementation("com.github.technove:Flare:2c4a2114a0") // Pufferfish - flare
+    // implementation("com.github.technove:Flare:2c4a2114a0") // Pufferfish - flare // AtelierMC - Remove flare
 
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("junit:junit:4.13.2")
diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index c32f284b5ce200c0f4dc7e22b986c10edee5a66f..9545316d76de4a23246a19a2a374d421a64ec0c0 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -11,7 +11,6 @@ import net.minecraft.world.entity.EntityType;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.List;
-import gg.pufferfish.pufferfish.flare.FlareCommand;
 import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.Level;
 import org.bukkit.configuration.ConfigurationSection;
@@ -145,7 +144,9 @@ public class PufferfishConfig {
 		ensureDefault(key, defaultValue, comment);
 		return config.getStringList(key);
 	}
-	
+
+    // AtelierMC start - Remove sentry
+    /*
 	public static String sentryDsn;
 	private static void sentry() {
 		String sentryEnvironment = System.getenv("SENTRY_DSN");
@@ -156,6 +157,8 @@ public class PufferfishConfig {
 			gg.pufferfish.pufferfish.sentry.SentryManager.init();
 		}
 	}
+    */
+    // AtelierMC end
 	
 	public static boolean enableBooks;
 	private static void books() {
@@ -232,6 +235,8 @@ public class PufferfishConfig {
 				"This can improve performance by a few percent, but has minor gameplay implications.");
 	}
 
+    // Atelier start - Remove flare
+    /*
     public static URI profileWebUrl;
     private static void profilerOptions() {
         profileWebUrl = URI.create(getString("flare.url", "https://flare.airplane.gg", "Sets the server to use for profiles."));
@@ -255,7 +260,8 @@ public class PufferfishConfig {
         setComment("web-services", "Options for connecting to Pufferfish/Airplane's online utilities");
 
     }
-
+    */
+    // AtelierMC end
 
     public static boolean disableMethodProfiler;
     private static void miscSettings() {
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/CustomCategories.java b/src/main/java/gg/pufferfish/pufferfish/flare/CustomCategories.java
deleted file mode 100644
index 401b42e29bccb5251684062f10b2e0f8b091bc95..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/CustomCategories.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package gg.pufferfish.pufferfish.flare;
-
-import co.technove.flare.live.category.GraphCategory;
-
-public class CustomCategories {
-    public static final GraphCategory MC_PERF = new GraphCategory("MC Performance");
-    public static final GraphCategory ENTITIES_AND_CHUNKS = new GraphCategory("Entities & Chunks");
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/FlareCommand.java b/src/main/java/gg/pufferfish/pufferfish/flare/FlareCommand.java
deleted file mode 100644
index 6401e508729407254abd8caea988f84d1eb7cb0f..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/FlareCommand.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package gg.pufferfish.pufferfish.flare;
-
-import co.technove.flare.exceptions.UserReportableException;
-import co.technove.flare.internal.profiling.ProfileType;
-import gg.pufferfish.pufferfish.PufferfishConfig;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.Level;
-import org.bukkit.Bukkit;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
-import org.bukkit.util.StringUtil;
-import org.jetbrains.annotations.NotNull;
-
-import java.time.Duration;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-public class FlareCommand extends Command {
-
-    private static final String BASE_URL = "https://blog.airplane.gg/flare-tutorial/#setting-the-access-token";
-    private static final TextColor HEX = TextColor.fromHexString("#e3eaea");
-    private static final Component PREFIX = Component.text()
-      .append(Component.text("Flare âœˆ")
-        .color(TextColor.fromHexString("#6a7eda"))
-        .decoration(TextDecoration.BOLD, true)
-        .append(Component.text(" ", HEX)
-          .decoration(TextDecoration.BOLD, false)))
-      .asComponent();
-
-    public FlareCommand() {
-        super("flare", "Profile your server with Flare", "/flare", Collections.singletonList("profile"));
-        this.setPermission("airplane.flare");
-    }
-
-    @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, String @NotNull [] args) {
-        if (!testPermission(sender)) return true;
-        if (PufferfishConfig.accessToken.length() == 0) {
-            Component clickable = Component.text(BASE_URL, HEX, TextDecoration.UNDERLINED).clickEvent(ClickEvent.clickEvent(ClickEvent.Action.OPEN_URL, BASE_URL));
-
-            sender.sendMessage(PREFIX.append(Component.text("Flare currently requires an access token to use. To learn more, visit ").color(HEX).append(clickable)));
-            return true;
-        }
-
-        if (!FlareSetup.isSupported()) {
-            sender.sendMessage(PREFIX.append(
-              Component.text("Profiling is not supported in this environment, check your startup logs for the error.", NamedTextColor.RED)));
-            return true;
-        }
-        if (ProfilingManager.isProfiling()) {
-            if (args.length == 1 && args[0].equalsIgnoreCase("status")) {
-                sender.sendMessage(PREFIX.append(Component.text("Current profile has been ran for " + ProfilingManager.getTimeRan().toString(), HEX)));
-                return true;
-            }
-            if (ProfilingManager.stop()) {
-                if (!(sender instanceof ConsoleCommandSender)) {
-                    sender.sendMessage(PREFIX.append(Component.text("Profiling has been stopped.", HEX)));
-                }
-            } else {
-                sender.sendMessage(PREFIX.append(Component.text("Profiling has already been stopped.", HEX)));
-            }
-        } else {
-            ProfileType profileType = ProfileType.ITIMER;
-            if (args.length > 0) {
-                try {
-                    profileType = ProfileType.valueOf(args[0].toUpperCase());
-                } catch (Exception e) {
-                    sender.sendMessage(PREFIX.append(Component
-                      .text("Invalid profile type ", HEX)
-                      .append(Component.text(args[0], HEX, TextDecoration.BOLD)
-                        .append(Component.text("!", HEX)))
-                    ));
-                }
-            }
-            ProfileType finalProfileType = profileType;
-            Bukkit.getScheduler().runTaskAsynchronously(new MinecraftInternalPlugin(), () -> {
-                try {
-                    if (ProfilingManager.start(finalProfileType)) {
-                        if (!(sender instanceof ConsoleCommandSender)) {
-                            sender.sendMessage(PREFIX.append(Component
-                              .text("Flare has been started: " + ProfilingManager.getProfilingUri(), HEX)
-                              .clickEvent(ClickEvent.openUrl(ProfilingManager.getProfilingUri()))
-                            ));
-                            sender.sendMessage(PREFIX.append(Component.text("  Run /" + commandLabel + " to stop the Flare.", HEX)));
-                        }
-                    } else {
-                        sender.sendMessage(PREFIX.append(Component
-                          .text("Flare has already been started: " + ProfilingManager.getProfilingUri(), HEX)
-                          .clickEvent(ClickEvent.openUrl(ProfilingManager.getProfilingUri()))
-                        ));
-                    }
-                } catch (UserReportableException e) {
-                    sender.sendMessage(Component.text("Flare failed to start: " + e.getUserError(), NamedTextColor.RED));
-                    if (e.getCause() != null) {
-                        MinecraftServer.LOGGER.log(Level.WARN, "Flare failed to start", e);
-                    }
-                }
-            });
-        }
-        return true;
-    }
-
-    @Override
-    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, String @NotNull [] args) throws IllegalArgumentException {
-        List<String> list = new ArrayList<>();
-        if (ProfilingManager.isProfiling()) {
-            if (args.length == 1) {
-                String lastWord = args[0];
-                if (StringUtil.startsWithIgnoreCase("status", lastWord)) {
-                    list.add("status");
-                }
-                if (StringUtil.startsWithIgnoreCase("stop", lastWord)) {
-                    list.add("stop");
-                }
-            }
-        } else {
-            if (args.length <= 1) {
-                String lastWord = args.length == 0 ? "" : args[0];
-                for (ProfileType value : ProfileType.values()) {
-                    if (StringUtil.startsWithIgnoreCase(value.getInternalName(), lastWord)) {
-                        list.add(value.name().toLowerCase());
-                    }
-                }
-            }
-        }
-        return list;
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/FlareSetup.java b/src/main/java/gg/pufferfish/pufferfish/flare/FlareSetup.java
deleted file mode 100644
index 0435f1dbec1cc9fc1751567128d9fff3f246c7b4..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/FlareSetup.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package gg.pufferfish.pufferfish.flare;
-
-import co.technove.flare.FlareInitializer;
-import co.technove.flare.internal.profiling.InitializationException;
-import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.Level;
-
-public class FlareSetup {
-
-    private static boolean initialized = false;
-    private static boolean supported = false;
-
-    public static void init() {
-        if (initialized) {
-            return;
-        }
-
-        initialized = true;
-        try {
-            for (String warning : FlareInitializer.initialize()) {
-                MinecraftServer.LOGGER.log(Level.WARN, "Flare warning: " + warning);
-            }
-            supported = true;
-        } catch (InitializationException e) {
-            MinecraftServer.LOGGER.log(Level.WARN, "Failed to enable Flare:", e);
-        }
-    }
-
-    public static boolean isSupported() {
-        return supported;
-    }
-
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/PluginLookup.java b/src/main/java/gg/pufferfish/pufferfish/flare/PluginLookup.java
deleted file mode 100644
index 74aab5eb4b54ffbaf19b8976ffb8ca4a64584006..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/PluginLookup.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package gg.pufferfish.pufferfish.flare;
-
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.java.PluginClassLoader;
-
-import java.util.Optional;
-import java.util.concurrent.TimeUnit;
-
-public class PluginLookup {
-    private static final Cache<String, String> pluginNameCache = CacheBuilder.newBuilder()
-      .expireAfterAccess(1, TimeUnit.MINUTES)
-      .maximumSize(1024)
-      .build();
-
-    public static Optional<String> getPluginForClass(String name) {
-        if (name.startsWith("net.minecraft") || name.startsWith("java.") || name.startsWith("com.mojang") ||
-          name.startsWith("com.google") || name.startsWith("it.unimi") || name.startsWith("sun")) {
-            return Optional.empty();
-        }
-
-        String existing = pluginNameCache.getIfPresent(name);
-        if (existing != null) {
-            return Optional.ofNullable(existing.isEmpty() ? null : existing);
-        }
-
-        String newValue = "";
-
-        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-            ClassLoader classLoader = plugin.getClass().getClassLoader();
-            if (classLoader instanceof PluginClassLoader) {
-                if (((PluginClassLoader) classLoader)._airplane_hasClass(name)) {
-                    newValue = plugin.getName();
-                    break;
-                }
-            }
-        }
-
-        pluginNameCache.put(name, newValue);
-        return Optional.ofNullable(newValue.isEmpty() ? null : newValue);
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java b/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java
deleted file mode 100644
index e3f76eb11a261c3347f0cd89b5da309bc2dc82f9..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java
+++ /dev/null
@@ -1,151 +0,0 @@
-package gg.pufferfish.pufferfish.flare;
-
-import co.technove.flare.Flare;
-import co.technove.flare.FlareAuth;
-import co.technove.flare.FlareBuilder;
-import co.technove.flare.exceptions.UserReportableException;
-import co.technove.flare.internal.profiling.ProfileType;
-import gg.pufferfish.pufferfish.PufferfishConfig;
-import gg.pufferfish.pufferfish.PufferfishLogger;
-import gg.pufferfish.pufferfish.compat.ServerConfigurations;
-import gg.pufferfish.pufferfish.flare.collectors.GCEventCollector;
-import gg.pufferfish.pufferfish.flare.collectors.StatCollector;
-import gg.pufferfish.pufferfish.flare.collectors.TPSCollector;
-import gg.pufferfish.pufferfish.flare.collectors.WorldCountCollector;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
-import org.bukkit.scheduler.BukkitTask;
-import oshi.SystemInfo;
-import oshi.hardware.CentralProcessor;
-import oshi.hardware.GlobalMemory;
-import oshi.hardware.HardwareAbstractionLayer;
-import oshi.hardware.VirtualMemory;
-import oshi.software.os.OperatingSystem;
-
-import java.io.IOException;
-import java.net.URI;
-import java.time.Duration;
-import java.util.Objects;
-import java.util.logging.Level;
-
-public class ProfilingManager {
-
-    private static Flare currentFlare;
-    private static BukkitTask currentTask = null;
-
-    public static synchronized boolean isProfiling() {
-        return currentFlare != null && currentFlare.isRunning();
-    }
-
-    public static synchronized String getProfilingUri() {
-        return Objects.requireNonNull(currentFlare).getURI().map(URI::toString).orElse("Flare is not running");
-    }
-
-    public static Duration getTimeRan() {
-        Flare flare = currentFlare; // copy reference so no need to sync
-        if (flare == null) {
-            return Duration.ofMillis(0);
-        }
-        return flare.getCurrentDuration();
-    }
-
-    public static synchronized boolean start(ProfileType profileType) throws UserReportableException {
-        if (currentFlare != null && !currentFlare.isRunning()) {
-            currentFlare = null; // errored out
-        }
-        if (isProfiling()) {
-            return false;
-        }
-        if (Bukkit.isPrimaryThread()) {
-            throw new UserReportableException("Profiles should be started off-thread");
-        }
-
-        try {
-            OperatingSystem os = new SystemInfo().getOperatingSystem();
-
-            SystemInfo systemInfo = new SystemInfo();
-            HardwareAbstractionLayer hardware = systemInfo.getHardware();
-
-            CentralProcessor processor = hardware.getProcessor();
-            CentralProcessor.ProcessorIdentifier processorIdentifier = processor.getProcessorIdentifier();
-
-            GlobalMemory memory = hardware.getMemory();
-            VirtualMemory virtualMemory = memory.getVirtualMemory();
-
-            FlareBuilder builder = new FlareBuilder()
-                    .withProfileType(profileType)
-                    .withMemoryProfiling(true)
-                    .withAuth(FlareAuth.fromTokenAndUrl(PufferfishConfig.accessToken, PufferfishConfig.profileWebUrl))
-
-                    .withFiles(ServerConfigurations.getCleanCopies())
-                    .withVersion("Primary Version", Bukkit.getVersion())
-                    .withVersion("Bukkit Version", Bukkit.getBukkitVersion())
-                    .withVersion("Minecraft Version", Bukkit.getMinecraftVersion())
-
-                    .withGraphCategories(CustomCategories.ENTITIES_AND_CHUNKS, CustomCategories.MC_PERF)
-                    .withCollectors(new TPSCollector(), new WorldCountCollector(), new GCEventCollector(), new StatCollector())
-                    .withClassIdentifier(PluginLookup::getPluginForClass)
-
-                    .withHardware(new FlareBuilder.HardwareBuilder()
-                            .setCoreCount(processor.getPhysicalProcessorCount())
-                            .setThreadCount(processor.getLogicalProcessorCount())
-                            .setCpuModel(processorIdentifier.getName())
-                            .setCpuFrequency(processor.getMaxFreq())
-
-                            .setTotalMemory(memory.getTotal())
-                            .setTotalSwap(virtualMemory.getSwapTotal())
-                            .setTotalVirtual(virtualMemory.getVirtualMax())
-                    )
-
-                    .withOperatingSystem(new FlareBuilder.OperatingSystemBuilder()
-                            .setManufacturer(os.getManufacturer())
-                            .setFamily(os.getFamily())
-                            .setVersion(os.getVersionInfo().toString())
-                            .setBitness(os.getBitness())
-                    );
-
-            currentFlare = builder.build();
-        } catch (IOException e) {
-            PufferfishLogger.LOGGER.log(Level.WARNING, "Failed to read configuration files:", e);
-            throw new UserReportableException("Failed to load configuration files, check logs for further details.");
-        }
-
-        try {
-            currentFlare.start();
-        } catch (IllegalStateException e) {
-            PufferfishLogger.LOGGER.log(Level.WARNING, "Error starting Flare:", e);
-            throw new UserReportableException("Failed to start Flare, check logs for further details.");
-        }
-
-        currentTask = Bukkit.getScheduler().runTaskLater(new MinecraftInternalPlugin(), ProfilingManager::stop, 20 * 60 * 15);
-        PufferfishLogger.LOGGER.log(Level.INFO, "Flare has been started: " + getProfilingUri());
-        return true;
-    }
-
-    public static synchronized boolean stop() {
-        if (!isProfiling()) {
-            return false;
-        }
-        if (!currentFlare.isRunning()) {
-            currentFlare = null;
-            return true;
-        }
-        PufferfishLogger.LOGGER.log(Level.INFO, "Flare has been stopped: " + getProfilingUri());
-        try {
-            currentFlare.stop();
-        } catch (IllegalStateException e) {
-            PufferfishLogger.LOGGER.log(Level.WARNING, "Error occurred stopping Flare", e);
-        }
-        currentFlare = null;
-
-        try {
-            currentTask.cancel();
-        } catch (Throwable t) {
-            PufferfishLogger.LOGGER.log(Level.WARNING, "Error occurred stopping Flare", t);
-        }
-
-        currentTask = null;
-        return true;
-    }
-
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/GCEventCollector.java b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/GCEventCollector.java
deleted file mode 100644
index d426575c669020f369960107da1e2de2f11f082f..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/GCEventCollector.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package gg.pufferfish.pufferfish.flare.collectors;
-
-import co.technove.flare.Flare;
-import co.technove.flare.internal.FlareInternal;
-import co.technove.flare.live.CollectorData;
-import co.technove.flare.live.EventCollector;
-import co.technove.flare.live.LiveEvent;
-import co.technove.flare.live.category.GraphCategory;
-import co.technove.flare.live.formatter.DataFormatter;
-import com.google.common.collect.ImmutableMap;
-import com.sun.management.GarbageCollectionNotificationInfo;
-
-import javax.management.ListenerNotFoundException;
-import javax.management.Notification;
-import javax.management.NotificationEmitter;
-import javax.management.NotificationListener;
-import javax.management.openmbean.CompositeData;
-import java.lang.management.GarbageCollectorMXBean;
-import java.lang.management.ManagementFactory;
-
-public class GCEventCollector extends EventCollector implements NotificationListener {
-
-    private static final CollectorData MINOR_GC = new CollectorData("builtin:gc:minor", "Minor GC", "A small pause in the program to allow Garbage Collection to run.", DataFormatter.MILLISECONDS, GraphCategory.SYSTEM);
-    private static final CollectorData MAJOR_GC = new CollectorData("builtin:gc:major", "Major GC", "A large pause in the program to allow Garbage Collection to run.", DataFormatter.MILLISECONDS, GraphCategory.SYSTEM);
-    private static final CollectorData UNKNOWN_GC = new CollectorData("builtin:gc:generic", "Major GC", "A run of the Garbage Collection.", DataFormatter.MILLISECONDS, GraphCategory.SYSTEM);
-
-    public GCEventCollector() {
-        super(MINOR_GC, MAJOR_GC, UNKNOWN_GC);
-    }
-
-    private static CollectorData fromString(String string) {
-        if (string.endsWith("minor GC")) {
-            return MINOR_GC;
-        } else if (string.endsWith("major GC")) {
-            return MAJOR_GC;
-        }
-        return UNKNOWN_GC;
-    }
-
-    @Override
-    public void start(Flare flare) {
-        for (GarbageCollectorMXBean garbageCollectorBean : ManagementFactory.getGarbageCollectorMXBeans()) {
-            NotificationEmitter notificationEmitter = (NotificationEmitter) garbageCollectorBean;
-            notificationEmitter.addNotificationListener(this, null, null);
-        }
-    }
-
-    @Override
-    public void stop(Flare flare) {
-        for (GarbageCollectorMXBean garbageCollectorBean : ManagementFactory.getGarbageCollectorMXBeans()) {
-            NotificationEmitter notificationEmitter = (NotificationEmitter) garbageCollectorBean;
-            try {
-                notificationEmitter.removeNotificationListener(this);
-            } catch (ListenerNotFoundException e) {
-            }
-        }
-    }
-
-    @Override
-    public void handleNotification(Notification notification, Object o) {
-        if (notification.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
-            GarbageCollectionNotificationInfo gcInfo = GarbageCollectionNotificationInfo.from((CompositeData) notification.getUserData());
-            reportEvent(new LiveEvent(fromString(gcInfo.getGcAction()), System.currentTimeMillis(), (int) gcInfo.getGcInfo().getDuration(), ImmutableMap.of()));
-        }
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/StatCollector.java b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/StatCollector.java
deleted file mode 100644
index a22c6dbae53667e4c72464fa27153aee30c7946e..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/StatCollector.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package gg.pufferfish.pufferfish.flare.collectors;
-
-import co.technove.flare.live.CollectorData;
-import co.technove.flare.live.LiveCollector;
-import co.technove.flare.live.category.GraphCategory;
-import co.technove.flare.live.formatter.DataFormatter;
-import com.sun.management.OperatingSystemMXBean;
-import oshi.SystemInfo;
-import oshi.hardware.CentralProcessor;
-
-import java.lang.management.ManagementFactory;
-import java.time.Duration;
-
-public class StatCollector extends LiveCollector {
-
-    private static final CollectorData CPU = new CollectorData("builtin:stat:cpu", "CPU Load", "The total amount of CPU usage across all cores.", DataFormatter.PERCENT, GraphCategory.SYSTEM);
-    private static final CollectorData CPU_PROCESS = new CollectorData("builtin:stat:cpu_process", "Process CPU", "The amount of CPU being used by this process.", DataFormatter.PERCENT, GraphCategory.SYSTEM);
-    private static final CollectorData MEMORY = new CollectorData("builtin:stat:memory_used", "Memory", "The amount of memory being used currently.", DataFormatter.BYTES, GraphCategory.SYSTEM);
-    private static final CollectorData MEMORY_TOTAL = new CollectorData("builtin:stat:memory_total", "Memory Total", "The total amount of memory allocated.", DataFormatter.BYTES, GraphCategory.SYSTEM);
-
-    private final OperatingSystemMXBean bean;
-    private final CentralProcessor processor;
-
-    public StatCollector() {
-        super(CPU, CPU_PROCESS, MEMORY, MEMORY_TOTAL);
-        this.interval = Duration.ofSeconds(5);
-
-        this.bean = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();
-        this.processor = new SystemInfo().getHardware().getProcessor();
-    }
-
-    @Override
-    public void run() {
-        Runtime runtime = Runtime.getRuntime();
-
-        this.report(CPU, this.processor.getSystemLoadAverage(1)[0] / 100); // percentage
-        this.report(CPU_PROCESS, this.bean.getProcessCpuLoad());
-        this.report(MEMORY, runtime.totalMemory() - runtime.freeMemory());
-        this.report(MEMORY_TOTAL, runtime.totalMemory());
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java
deleted file mode 100644
index 40447d00aefb5ffedb8a2ee87155a04088f0649f..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package gg.pufferfish.pufferfish.flare.collectors;
-
-import co.technove.flare.live.CollectorData;
-import co.technove.flare.live.LiveCollector;
-import co.technove.flare.live.formatter.SuffixFormatter;
-import gg.pufferfish.pufferfish.flare.CustomCategories;
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
-
-import java.time.Duration;
-import java.util.Arrays;
-
-public class TPSCollector extends LiveCollector {
-    private static final CollectorData TPS = new CollectorData("airplane:tps", "TPS", "Ticks per second, or how fast the server updates. For a smooth server this should be a constant 20TPS.", SuffixFormatter.of("TPS"), CustomCategories.MC_PERF);
-    private static final CollectorData MSPT = new CollectorData("airplane:mspt", "MSPT", "Milliseconds per tick, which can show how well your server is performing. This value should always be under 50mspt.", SuffixFormatter.of("mspt"), CustomCategories.MC_PERF);
-
-    public TPSCollector() {
-        super(TPS, MSPT);
-
-        this.interval = Duration.ofSeconds(5);
-    }
-
-    @Override
-    public void run() {
-        long[] times = MinecraftServer.getServer().tickTimes5s.getTimes();
-        double mspt = ((double) Arrays.stream(times).sum() / (double) times.length) * 1.0E-6D;
-
-        this.report(TPS, Math.min(20D, Math.round(Bukkit.getServer().getTPS()[0] * 100d) / 100d));
-        this.report(MSPT, (double) Math.round(mspt * 100d) / 100d);
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/WorldCountCollector.java b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/WorldCountCollector.java
deleted file mode 100644
index db15d3fbe2b65fc8035573f5fdbea382055db9b2..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/WorldCountCollector.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package gg.pufferfish.pufferfish.flare.collectors;
-
-import co.technove.flare.live.CollectorData;
-import co.technove.flare.live.LiveCollector;
-import co.technove.flare.live.formatter.SuffixFormatter;
-import gg.pufferfish.pufferfish.flare.CustomCategories;
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-import org.bukkit.craftbukkit.CraftWorld;
-
-import java.time.Duration;
-
-public class WorldCountCollector extends LiveCollector {
-
-    private static final CollectorData PLAYER_COUNT = new CollectorData("airplane:world:playercount", "Player Count", "The number of players currently on the server.", new SuffixFormatter(" Player", " Players"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData ENTITY_COUNT = new CollectorData("airplane:world:entitycount", "Entity Count", "The number of entities in all worlds", new SuffixFormatter(" Entity", " Entities"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData CHUNK_COUNT = new CollectorData("airplane:world:chunkcount", "Chunk Count", "The number of chunks currently loaded.", new SuffixFormatter(" Chunk", " Chunks"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData TILE_ENTITY_COUNT = new CollectorData("airplane:world:blockentitycount", "Block Entity Count", "The number of block entities currently loaded.", new SuffixFormatter(" Block Entity", " Block Entities"), CustomCategories.ENTITIES_AND_CHUNKS);
-
-    public WorldCountCollector() {
-        super(PLAYER_COUNT, ENTITY_COUNT, CHUNK_COUNT, TILE_ENTITY_COUNT);
-
-        this.interval = Duration.ofSeconds(5);
-    }
-
-    @Override
-    public void run() {
-        int entities = 0;
-        int chunkCount = 0;
-        int tileEntityCount = 0;
-
-        if (!Bukkit.isStopping()) {
-            for (World world : Bukkit.getWorlds()) {
-                entities += ((CraftWorld) world).getHandle().entityManager.getEntityGetter().getCount();
-                chunkCount += world.getChunkCount();
-                tileEntityCount += world.getTileEntityCount();
-            }
-        }
-
-        this.report(PLAYER_COUNT, Bukkit.getOnlinePlayers().size());
-        this.report(ENTITY_COUNT, entities);
-        this.report(CHUNK_COUNT, chunkCount);
-        this.report(TILE_ENTITY_COUNT, tileEntityCount);
-    }
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java b/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java
deleted file mode 100644
index 731ef11c7a025ae95ed8a757b530d834733d0621..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package gg.pufferfish.pufferfish.sentry;
-
-import com.google.common.reflect.TypeToken;
-import com.google.gson.Gson;
-import io.sentry.Breadcrumb;
-import io.sentry.Sentry;
-import io.sentry.SentryEvent;
-import io.sentry.SentryLevel;
-import io.sentry.protocol.Message;
-import io.sentry.protocol.User;
-import java.util.Map;
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.Logger;
-import org.apache.logging.log4j.core.appender.AbstractAppender;
-import org.apache.logging.log4j.core.filter.AbstractFilter;
-
-public class PufferfishSentryAppender extends AbstractAppender {
-	
-	private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger(PufferfishSentryAppender.class);
-	private static final Gson GSON = new Gson();
-	
-	public PufferfishSentryAppender() {
-		super("PufferfishSentryAdapter", new SentryFilter(), null);
-	}
-	
-	@Override
-	public void append(LogEvent logEvent) {
-		if (logEvent.getThrown() != null && logEvent.getLevel().isMoreSpecificThan(Level.WARN)) {
-			try {
-				logException(logEvent);
-			} catch (Exception e) {
-				logger.warn("Failed to log event with sentry", e);
-			}
-		} else {
-			try {
-				logBreadcrumb(logEvent);
-			} catch (Exception e) {
-				logger.warn("Failed to log event with sentry", e);
-			}
-		}
-	}
-	
-	private void logException(LogEvent e) {
-		SentryEvent event = new SentryEvent(e.getThrown());
-		
-		Message sentryMessage = new Message();
-		sentryMessage.setMessage(e.getMessage().getFormattedMessage());
-		
-		event.setThrowable(e.getThrown());
-		event.setLevel(getLevel(e.getLevel()));
-		event.setLogger(e.getLoggerName());
-		event.setTransaction(e.getLoggerName());
-		event.setExtra("thread_name", e.getThreadName());
-		
-		boolean hasContext = e.getContextData() != null;
-		
-		if (hasContext && e.getContextData().containsKey("pufferfishsentry_playerid")) {
-			User user = new User();
-			user.setId(e.getContextData().getValue("pufferfishsentry_playerid"));
-			user.setUsername(e.getContextData().getValue("pufferfishsentry_playername"));
-			event.setUser(user);
-		}
-		
-		if (hasContext && e.getContextData().containsKey("pufferfishsentry_pluginname")) {
-			event.setExtra("plugin.name", e.getContextData().getValue("pufferfishsentry_pluginname"));
-			event.setExtra("plugin.version", e.getContextData().getValue("pufferfishsentry_pluginversion"));
-			event.setTransaction(e.getContextData().getValue("pufferfishsentry_pluginname"));
-		}
-		
-		if (hasContext && e.getContextData().containsKey("pufferfishsentry_eventdata")) {
-			Map<String, String> eventFields = GSON.fromJson((String) e.getContextData().getValue("pufferfishsentry_eventdata"), new TypeToken<Map<String, String>>() {}.getType());
-			if (eventFields != null) {
-				event.setExtra("event", eventFields);
-			}
-		}
-		
-		Sentry.captureEvent(event);
-	}
-	
-	private void logBreadcrumb(LogEvent e) {
-		Breadcrumb breadcrumb = new Breadcrumb();
-		
-		breadcrumb.setLevel(getLevel(e.getLevel()));
-		breadcrumb.setCategory(e.getLoggerName());
-		breadcrumb.setType(e.getLoggerName());
-		breadcrumb.setMessage(e.getMessage().getFormattedMessage());
-		
-		Sentry.addBreadcrumb(breadcrumb);
-	}
-	
-	private SentryLevel getLevel(Level level) {
-		switch (level.getStandardLevel()) {
-			case TRACE:
-			case DEBUG:
-				return SentryLevel.DEBUG;
-			case WARN:
-				return SentryLevel.WARNING;
-			case ERROR:
-				return SentryLevel.ERROR;
-			case FATAL:
-				return SentryLevel.FATAL;
-			case INFO:
-			default:
-				return SentryLevel.INFO;
-		}
-	}
-	
-	private static class SentryFilter extends AbstractFilter {
-		
-		@Override
-		public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, String msg,
-				Object... params) {
-			return this.filter(logger.getName());
-		}
-		
-		@Override
-		public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, Object msg, Throwable t) {
-			return this.filter(logger.getName());
-		}
-		
-		@Override
-		public Result filter(LogEvent event) {
-			return this.filter(event == null ? null : event.getLoggerName());
-		}
-		
-		private Result filter(String loggerName) {
-			return loggerName != null && loggerName.startsWith("gg.castaway.pufferfish.sentry") ? Result.DENY
-					: Result.NEUTRAL;
-		}
-		
-	}
-}
diff --git a/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java b/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java
deleted file mode 100644
index 1b29210ad0bbb4ada150f23357f0c80d331c996d..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package gg.pufferfish.pufferfish.sentry;
-
-import gg.pufferfish.pufferfish.PufferfishConfig;
-import io.sentry.Sentry;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public class SentryManager {
-	
-	private static final Logger logger = LogManager.getLogger(SentryManager.class);
-	
-	private SentryManager() {
-	
-	}
-	
-	private static boolean initialized = false;
-	
-	public static synchronized void init() {
-		if (initialized) {
-			return;
-		}
-		try {
-			initialized = true;
-			
-			Sentry.init(options -> {
-				options.setDsn(PufferfishConfig.sentryDsn);
-				options.setMaxBreadcrumbs(100);
-			});
-			
-			PufferfishSentryAppender appender = new PufferfishSentryAppender();
-			appender.start();
-			((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).addAppender(appender);
-			logger.info("Sentry logging started!");
-		} catch (Exception e) {
-			logger.warn("Failed to initialize sentry!", e);
-			initialized = false;
-		}
-	}
-	
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
index f1be8a98c49a63d09c838a85eb58041733f71776..c1f330746910b0e0059dee6557e348fa31ce2ac5 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
@@ -11,7 +11,7 @@ public class ServerShutdownThread extends Thread {
 
     @Override
     public void run() {
-        try { gg.pufferfish.pufferfish.flare.ProfilingManager.stop(); } catch (Throwable t) {} // Pufferfish - shut down Flare if it's running
+        // try { gg.pufferfish.pufferfish.flare.ProfilingManager.stop(); } catch (Throwable t) {} // Pufferfish - shut down Flare if it's running // AtelierMC - remove Flare
         try {
             // Paper start - try to shutdown on main
             server.safeShutdown(false, false);
