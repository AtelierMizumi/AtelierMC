From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JustMangoT <minetuan2@gmail.com>
Date: Fri, 10 Dec 2021 00:29:56 +0700
Subject: [PATCH] EMC and Purpur patches


diff --git a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
index 3661ac5e3bfdebb2911cb1b118942b9fc7884140..4622d42221f75206e1a7495c8d4896c3d6f35b34 100644
--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -92,6 +92,7 @@ public final class PaperAdventure {
         })
         .build();
     public static final LegacyComponentSerializer LEGACY_SECTION_UXRC = LegacyComponentSerializer.builder().flattener(FLATTENER).hexColors().useUnusualXRepeatedCharacterHexFormat().build();
+    public static final LegacyComponentSerializer LEGACY_AMPERSAND = LegacyComponentSerializer.builder().character(LegacyComponentSerializer.AMPERSAND_CHAR).hexColors().build(); // Purpur
     public static final PlainComponentSerializer PLAIN_COMPONENT = PlainComponentSerializer.builder().flattener(FLATTENER).build();
     public static final PlainTextComponentSerializer PLAIN = PlainTextComponentSerializer.builder().flattener(FLATTENER).build();
     public static final GsonComponentSerializer GSON = GsonComponentSerializer.builder()
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 1617437515590a32c42687d290dd11bc8fa8edf5..ea9ca58435d05be367b7f7019b63e92163be1799 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -389,18 +389,22 @@ public class Commands {
     }
 
     private void runSync(ServerPlayer player, Collection<String> bukkit, RootCommandNode<SharedSuggestionProvider> rootcommandnode) {
-        // Paper end - Async command map building
-        new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
-        PlayerCommandSendEvent event = new PlayerCommandSendEvent(player.getBukkitEntity(), new LinkedHashSet<>(bukkit));
-        event.getPlayer().getServer().getPluginManager().callEvent(event);
-
-        // Remove labels that were removed during the event
-        for (String orig : bukkit) {
-            if (!event.getCommands().contains(orig)) {
-                rootcommandnode.removeCommand(orig);
+        // Purpur start - skip all this crap if there's nothing listening
+        if (PlayerCommandSendEvent.getHandlerList().getRegisteredListeners().length > 0) {
+            // Paper end - Async command map building
+            new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
+            PlayerCommandSendEvent event = new PlayerCommandSendEvent(player.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+            event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+            // Remove labels that were removed during the event
+            for (String orig : bukkit) {
+                if (!event.getCommands().contains(orig)) {
+                    rootcommandnode.removeCommand(orig);
+                }
             }
+            // CraftBukkit end
         }
-        // CraftBukkit end
+        // Purpur end - skip event
         player.connection.send(new ClientboundCommandsPacket(rootcommandnode));
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8d0ede0169f1cd86d342c1972945983448a9ca09..8b1df96357c4640caa7ff5906b7c9c9d6812a0f3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -304,6 +304,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     private static final int SAMPLE_INTERVAL = 20; // Paper
     public final double[] recentTps = new double[ 3 ];
+    public boolean lagging = false; // Purpur
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
     public static long currentTickLong = 0L; // Paper
@@ -1251,6 +1252,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
                         this.recentTps[1] = tps5.getAverage();
                         this.recentTps[2] = tps15.getAverage();
                         // Paper end
+                        lagging = recentTps[0] < 18.3635D; // Purpur
                         tickSection = curTime;
                     }
                     // Spigot end
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index c8a319587497d1a46a3541528987b59727a5d466..7b5a2496fea6a87db49b03c2959321ed23761e0c 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -189,6 +189,7 @@ public class ServerEntity {
                         this.teleportDelay = 0;
                         packet1 = new ClientboundTeleportEntityPacket(this.entity);
                     }
+                    if (isUselessPacket(packet1)) packet1 = null; // Purpur
                 }
 
                 if ((this.trackDelta || this.entity.hasImpulse || this.entity instanceof LivingEntity && ((LivingEntity) this.entity).isFallFlying()) && this.tickCount > 0) {
@@ -257,6 +258,22 @@ public class ServerEntity {
 
     }
 
+    // Purpur start
+    private boolean isUselessPacket(Packet<?> possibleUselessPacket) {
+        if (possibleUselessPacket instanceof ClientboundMoveEntityPacket) {
+            ClientboundMoveEntityPacket packet = (ClientboundMoveEntityPacket) possibleUselessPacket;
+            if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.Pos) {
+                return packet.getXa() == 0 && packet.getYa() == 0 && packet.getZa() == 0;
+            } else if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.PosRot) {
+                return packet.getXa() == 0 && packet.getYa() == 0 && packet.getZa() == 0 && packet.getyRot() == 0 && packet.getxRot() == 0;
+            } else if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.Rot) {
+                return packet.getyRot() == 0 && packet.getxRot() == 0;
+            }
+        }
+        return false;
+    }
+    // Purpur end
+
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
         player.connection.send(new ClientboundRemoveEntitiesPacket(new int[]{this.entity.getId()}));
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 889a4804eaa128e2f79a4ea48b8aa796336576d1..86d7f14fddf99a0f1bf6e487b268eef3903b238e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -228,6 +228,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private long keepAliveTime = Util.getMillis();
     private boolean keepAlivePending;
     private long keepAliveChallenge;
+    private java.util.List<Long> keepAlives = new java.util.ArrayList<>(); // Purpur
     // CraftBukkit start - multithreaded fields
     private final AtomicInteger chatSpamTickCount = new AtomicInteger();
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
@@ -359,6 +360,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         long currentTime = Util.getMillis();
         long elapsedTime = currentTime - this.keepAliveTime;
 
+        // Purpur start
+        /*
         if (this.keepAlivePending) {
             if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
@@ -372,6 +375,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                 this.send(new ClientboundKeepAlivePacket(this.keepAliveChallenge));
             }
         }
+        */
+        if (elapsedTime >= 1000L) { // 1 second
+            if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT) {
+                LOGGER.warn("{} was kicked due to keepalive timeout!", player.getName());
+                disconnect(new TranslatableComponent("disconnect.timeout"));
+            } else {
+                keepAliveTime = currentTime; // hijack this field for 1 second intervals
+                keepAlives.add(currentTime); // currentTime is ID
+                send(new ClientboundKeepAlivePacket(currentTime));
+            }
+        }
+        // Purpur end
         // Paper end
 
         this.server.getProfiler().pop();
@@ -2085,7 +2100,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private void handleChat(TextFilter.FilteredText message) {
         if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
             this.send(new ClientboundChatPacket((new TranslatableComponent("chat.disabled.options")).withStyle(ChatFormatting.RED), ChatType.SYSTEM, Util.NIL_UUID));
-        } else {
+        } else if (player.didPlayerJoinEvent) { // EMC - do not handle chat messages before they joined
             this.player.resetLastActionTime();
             String s = message.getRaw();
 
@@ -3100,6 +3115,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
+        // Purpur start
+        /*
         //PlayerConnectionUtils.ensureMainThread(packetplayinkeepalive, this, this.player.getWorldServer()); // CraftBukkit // Paper - This shouldn't be on the main thread
         if (this.keepAlivePending && packet.getId() == this.keepAliveChallenge) {
             int i = (int) (Util.getMillis() - this.keepAliveTime);
@@ -3113,7 +3130,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             });
             // Paper end
         }
-
+        */
+        long id = packet.getId();
+        if (keepAlives.size() > 0 && keepAlives.contains(id)) {
+            int ping = (int) (Util.getMillis() - id);
+            player.latency = (player.latency * 3 + ping) / 4;
+            keepAlives.clear(); // we got a valid response, lets roll with it and forget the rest
+        }
+        // Purpur end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
index 4fa79d37ff4e70c61672cce7c55257c46232c026..df43d0a0f3d1e34baabae150cbf01a008eb5a588 100644
--- a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -153,6 +153,7 @@ public class ServerStatusPacketListenerImpl implements ServerStatusPacketListene
             this.connection.send(new ClientboundStatusResponsePacket(ping));
             // CraftBukkit end
             */
+            if (this.server.getStatus().getVersion() == null) return; // Purpur - do not respond to pings before we know the protocol version
             com.destroystokyo.paper.network.StandardPaperServerListPingEventImpl.processRequest(this.server, this.connection);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 777f85d3e0b44d97794858c09d7ded04cd58d87e..e4677995d1d42b4388095a282b4341fabc8daddf 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1764,6 +1764,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
         this.yRotO = this.getYRot();
         this.xRotO = this.getXRot();
         this.setYHeadRot(yaw); // Paper - Update head rotation
+        if (valid && !this.isRemoved()) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit // Paper // Purpur
     }
 
     public void absMoveTo(double x, double y, double z) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 713aa628a509341a519c5bd82736bcb85d18bbfc..03ff9dfd265b96b6a1dfbbb65f98a4ab2540da80 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2925,7 +2925,7 @@ public abstract class LivingEntity extends Entity {
             }
         }
 
-        this.aiStep();
+        if (!this.isRemoved()) this.aiStep(); // Purpur
         double d0 = this.getX() - this.xo;
         double d1 = this.getZ() - this.zo;
         float f = (float) (d0 * d0 + d1 * d1);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 7d6bc3c253a77adfc7c35383caadb37154dc5c0f..993137de1bfcb50ee95654392356eefabe7e54fc 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -137,6 +137,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }, MemoryModuleType.MEETING_POINT, (entityvillager, villageplacetype) -> {
         return villageplacetype == PoiType.MEETING;
     });
+    private final int brainTickOffset; // Purpur
 
     public long nextGolemPanic = -1; // Pufferfish
 
@@ -151,6 +152,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.getNavigation().setCanFloat(true);
         this.setCanPickUpLoot(true);
         this.setVillagerData(this.getVillagerData().setType(type).setProfession(VillagerProfession.NONE));
+        this.brainTickOffset = getRandom().nextInt(100); // Purpur
     }
 
     @Override
@@ -248,6 +250,10 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
+        // Purpur start
+        boolean tick = (level.getGameTime() + brainTickOffset) % 2 == 0;
+        if (!((ServerLevel) level).getServer().lagging || tick)
+        // Purpur end
         // Pufferfish start
         if (!inactive) {
             if (this.behaviorTick++ % this.activatedPriority == 0) // Pufferfish
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index fe502e148e218ae404e0049c0251d3e3ca08c825..015422d2a01c99c121481643473b8a129bbbac77 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -355,4 +355,11 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     public boolean isAttackable() {
         return false;
     }
+
+    // EMC start
+    @Override
+    public boolean shouldBeSaved() {
+        return false;
+    }
+    // EMC end
 }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 904bfc59d3ad54f54a5608de2575717c5c70503e..5bf19e17e6ea1ec99a63f06e347604477cb8855e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -898,7 +898,11 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public void neighborChanged(BlockPos pos, Block sourceBlock, BlockPos neighborPos) {
         if (!this.isClientSide) {
-            BlockState iblockdata = this.getBlockState(pos);
+            // EMC start
+            // BlockState iblockdata = this.getBlockState(pos);
+            BlockState iblockdata = this.getBlockStateIfLoaded(pos);
+            if (iblockdata == null) return;
+            // EMC end
 
             try {
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index b7c4f2144fae2ceadcdfd94f7e3948d9ceef4a4a..de67cf3186e8b49c48736be168901e412a033e5c 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -930,7 +930,11 @@ public abstract class BlockBehaviour {
                 Direction enumdirection = aenumdirection[l];
 
                 blockposition_mutableblockposition.setWithOffset(pos, enumdirection);
-                BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                // EMC start
+                //BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                BlockState iblockdata = world.getBlockStateIfLoaded(blockposition_mutableblockposition);
+                if (iblockdata == null) continue;
+                // EMC end
                 BlockState iblockdata1 = iblockdata.updateShape(enumdirection.getOpposite(), this.asState(), world, blockposition_mutableblockposition, pos);
 
                 Block.updateOrDestroy(iblockdata, iblockdata1, world, blockposition_mutableblockposition, flags, maxUpdateDepth);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a117edcf95cebdb1bd4d781f6423cf1620dea478..58809ab0b86aa8124c046c6f2c396ef4c7eddf0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -398,7 +398,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean unloadChunk(int x, int z) {
-        return this.unloadChunk(x, z, true);
+        return this.unloadChunkRequest(x, z); // EMC
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index b2a15c986c7500a0ce227a54cb61ec3f5378f6f3..adc6f02bd3d381b3b059a69e947c57446163de9c 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -255,7 +255,7 @@ public final class CraftLegacy {
     }
 
     static {
-        System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
+        // System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!"); // Purpur
         if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
         }
